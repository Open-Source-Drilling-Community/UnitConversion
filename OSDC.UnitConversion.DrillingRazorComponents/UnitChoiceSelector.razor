@using OSDC.UnitConversion.Conversion;
@using OSDC.UnitConversion.Conversion.DrillingEngineering;

<select @bind="@UnitChoiceName">
    @foreach (string choice in UnitChoices)
    {
        <option>@choice</option>
    }
</select>

@code {
    [Parameter]
    public string QuantityName { get; set; }

    [Parameter]
    public string UnitChoiceName
    {
        get
        {
            return unitChoiceName_;
        }
        set
        {
            unitChoiceName_ = value;
            if (!inhibited_)
            {
                ManageChangedValue();
            }
        }
    }

    private bool inhibited_ = false;
    private string unitChoiceName_;

    public List<string> UnitChoices { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UnitChoices = new List<string>();
        OSDC.UnitConversion.Conversion.PhysicalQuantity quantity = DrillingPhysicalQuantity.GetQuantity(QuantityName);
        if (quantity != null)
        {
            UnitChoices = quantity.GetUnitChoiceNames();
        }
        UnitChoices.Sort();
        if (UnitChoices.Count > 0)
        {
            UnitChoiceName = UnitChoices[0];
        }
    }

    private async Task ManageChangedValue()
    {
        try
        {
            inhibited_ = true;
            // await UnitChoiceNameChanged.InvokeAsync(unitChoiceName_);
            inhibited_ = false;
        }
        catch (Exception e)
        {

        }
    }

    [Parameter]
    public EventCallback<string> UnitChoiceNameChanged { get; set; }

}
