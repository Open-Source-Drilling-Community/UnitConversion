@page "/DrillingPhysicalQuantities"
@using System.Text;
@using System.Globalization
@using OSDC.UnitConversion.DrillingUnitConversion.ModelClientShared;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Logging;
@inject ILogger<DrillingPhysicalQuantities> logger

@if (drillingPhysicalQuantities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*Header of the page for DrillingPhysicalQuantities (always visible)*@
    <h1>Drilling Physical Quantities</h1>
    <h2>Overview</h2>
    @*Panel showing the list of available DrillingPhysicalQuantities (visible when not editing a particular DataUnitConversionSet)*@
    <div hidden="@IsHidMainPanel">
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Time Dim.</td>
                    <td>Length Dim.</td>
                    <td>Mass Dim.</td>
                    <td>Temperature Dim.</td>
                    <td>Amount Substance Dim.</td>
                    <td>Electric Current Dim.</td>
                    <td>Luminous Intensity Dim.</td>
                    <td>Plane Angle Dim.</td>
                    <td>Solid Angle Dim.</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < drillingPhysicalQuantities.Count; i++)
                {
                    var local_i = i; // Do not use a loop variable directly in a lambda expression
                    <tr>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].Name</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].TimeDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].LengthDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].MassDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].TemperatureDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].AmountSubstanceDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].ElectricCurrentDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].LuminousIntensityDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].PlaneAngleDimension</span>
                        </td>
                        <td>
                            <span class="label">@drillingPhysicalQuantities[i].SolidAngleDimension</span>
                        </td>
                        <td align="right">
                            <button class="btn btn-primary" @onclick="@(() => Details(local_i))">Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h2 hidden="@IsHidDetailsPanel">Details</h2>
    <div hidden="@IsHidDetailsPanel">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <span class="label">Name</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityName</span>
                    </td>
                </tr>
                <tr hidden="@IsHidTimeDimension">
                    <td>
                        <span class="label">Time Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityTimeDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidLengthDimension">
                    <td>
                        <span class="label">Length Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityLengthDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidMassDimension">
                    <td>
                        <span class="label">Mass Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityMassDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidTemperatureDimension">
                    <td>
                        <span class="label">Temperature Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityTemperatureDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidElectricCurrentDimension">
                    <td>
                        <span class="label">Electric Current Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityElectricCurrentDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidLuminousIntensityDimension">
                    <td>
                        <span class="label">Luminous Intensity Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityLuminousIntensityDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidPlaneAngleDimension">
                    <td>
                        <span class="label">Plane Angle Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityPlaneAngleDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidSolidAngleDimension">
                    <td>
                        <span class="label">Solid Angle Dimension</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantitySolidAngleDimension</span>
                    </td>
                </tr>
                <tr hidden="@IsHidSIUnitSymbol">
                    <td>
                        <span class="label">SI Unit Symbol</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantitySIUnitSymbol</span>
                    </td>
                </tr>

                <tr hidden="@IsHidMeaningfullPrecision">
                    <td>
                        <span class="label">Meaningfull Precision</span>
                    </td>
                    <td>
                        <span class="label">@physicalQuantityMeaningfullPrecision</span>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Unit Choices</h3>
        <table class="table">
            <thead>
                <tr>
                    <td>Unit Choice Name</td>
                    <td>Unit Choice Label</td>
                </tr>
             </thead>
            <tbody>
                @foreach (UnitChoice unitChoice in physicalQuantityUnitChoices)
                {
                <tr>
                    <td>@unitChoice.UnitName</td>
                    <td>@unitChoice.UnitLabel</td>
                </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
    </div>
}

@code {

        //http client
    private HttpClient httpClient;

    //html booleans for dynamic visualization
    private bool IsHidMainPanel = false;
    private bool IsHidDetailsPanel = true;
    private bool IsHidTimeDimension = true;
    private bool IsHidLengthDimension = true;
    private bool IsHidMassDimension = true;
    private bool IsHidTemperatureDimension = true;
    private bool IsHidElectricCurrentDimension = true;
    private bool IsHidLuminousIntensityDimension = true;
    private bool IsHidPlaneAngleDimension = true;
    private bool IsHidSolidAngleDimension = true;
    private bool IsHidMeaningfullPrecision = true;
    private bool IsHidSIUnitSymbol = true;

    //model data objects
    private List<PhysicalQuantity> drillingPhysicalQuantities;

    //UI binding for PhysicalQuanityDetails variables
    private string physicalQuantityName = null;
    private double? physicalQuantityTimeDimension = null;
    private double? physicalQuantityLengthDimension = null;
    private double? physicalQuantityMassDimension = null;
    private double? physicalQuantityTemperatureDimension = null;
    private double? physicalQuantityElectricCurrentDimension = null;
    private double? physicalQuantityLuminousIntensityDimension = null;
    private double? physicalQuantityPlaneAngleDimension = null;
    private double? physicalQuantitySolidAngleDimension = null;
    private string physicalQuantityMeaningfullPrecision = null;
    private string physicalQuantitySIUnitSymbol = null;

    private List<UnitChoice> physicalQuantityUnitChoices = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string host = OSDC.UnitConversion.DrillingUnitConversion.WebApp.Client.Configuration.DrillingUnitConversionHostURL;
            logger.LogInformation("Trying to load DrillingPhysicalQuantities from client: " + host);
            httpClient = APIUtils.SetHttpClient(host);
            drillingPhysicalQuantities = await APIUtils.LoadDrillingPhysicalQuantities(httpClient, logger);
            physicalQuantityUnitChoices = new List<UnitChoice>();
        }
        catch (Exception ex)
        {
            httpClient = null;
            logger.LogError(ex, "Impossible to load DrillingPhysicalQuantities on initialization");
        }
    }

    private void Details(int idx)
    {
        if (drillingPhysicalQuantities != null && idx >= 0 && idx < drillingPhysicalQuantities.Count)
        {
            physicalQuantityName = drillingPhysicalQuantities[idx].Name;
            physicalQuantityTimeDimension = drillingPhysicalQuantities[idx].TimeDimension;
            IsHidTimeDimension = System.Math.Abs(drillingPhysicalQuantities[idx].TimeDimension) < 1e-6;
            physicalQuantityLengthDimension = drillingPhysicalQuantities[idx].LengthDimension;
            IsHidLengthDimension = System.Math.Abs(drillingPhysicalQuantities[idx].LengthDimension) < 1e-6;
            physicalQuantityMassDimension = drillingPhysicalQuantities[idx].MassDimension;
            IsHidMassDimension = System.Math.Abs(drillingPhysicalQuantities[idx].MassDimension) < 1e-6;
            physicalQuantityTemperatureDimension = drillingPhysicalQuantities[idx].TemperatureDimension;
            IsHidTemperatureDimension = System.Math.Abs(drillingPhysicalQuantities[idx].TemperatureDimension) < 1e-6;
            physicalQuantityElectricCurrentDimension = drillingPhysicalQuantities[idx].ElectricCurrentDimension;
            IsHidElectricCurrentDimension = System.Math.Abs(drillingPhysicalQuantities[idx].ElectricCurrentDimension) < 1e-6;
            physicalQuantityLuminousIntensityDimension = drillingPhysicalQuantities[idx].LuminousIntensityDimension;
            IsHidLuminousIntensityDimension = System.Math.Abs(drillingPhysicalQuantities[idx].LuminousIntensityDimension) < 1e-6;
            physicalQuantityPlaneAngleDimension = drillingPhysicalQuantities[idx].PlaneAngleDimension;
            IsHidPlaneAngleDimension = System.Math.Abs(drillingPhysicalQuantities[idx].PlaneAngleDimension) < 1e-6;
            physicalQuantitySolidAngleDimension = drillingPhysicalQuantities[idx].SolidAngleDimension;
            IsHidSolidAngleDimension = System.Math.Abs(drillingPhysicalQuantities[idx].SolidAngleDimension) < 1e-6;
            IsHidMeaningfullPrecision = drillingPhysicalQuantities[idx].MeaningFullPrecisionInSI == null;
            if (drillingPhysicalQuantities[idx].MeaningFullPrecisionInSI != null)
            {
                double val = (double)(drillingPhysicalQuantities[idx].MeaningFullPrecisionInSI);
                physicalQuantityMeaningfullPrecision = val.ToString(CultureInfo.InvariantCulture) + " " + drillingPhysicalQuantities[idx].SIUnitLabel;
            }
            IsHidSIUnitSymbol = drillingPhysicalQuantities[idx].SIUnitLabel == null;
            physicalQuantitySIUnitSymbol = drillingPhysicalQuantities[idx].SIUnitLabel;
            physicalQuantityUnitChoices.Clear();
            if (drillingPhysicalQuantities[idx].UnitChoices != null)
            {
                foreach (UnitChoice unitChoice in drillingPhysicalQuantities[idx].UnitChoices)
                {
                    physicalQuantityUnitChoices.Add(unitChoice);
                }
            }
            IsHidDetailsPanel = false;
        }
    }
    private void Cancel()
    {
        IsHidDetailsPanel = true;
    }
}


