@page "/QuantityUnitConversion"
@using System.Text;
@using System.Globalization;
@using System.Threading;
@using OSDC.UnitConversion.DrillingUnitConversion.ModelClientShared;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Logging;
@inject ILogger<DrillingPhysicalQuantities> logger

@if (quantityChoices_ == null && quantityUnitChoices_ == null && conversion_ == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*Header of the page for QuantityUnitConversion (always visible)*@
    <h1>Quantity Unit Conversion</h1>
    @*Panel showing the physical quantity unit conversion*@
    <div>
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <span class="label">Physical Quantity</span>
                    </td>
                    <td>
                        <select @bind="@QuantityChoice">
                            @foreach (Tuple<Guid, string> tuple in QuantityChoices)
                            {
                                <option>@tuple.Item2</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="label">Unit Choice</span>
                    </td>
                    <td>
                        <select @bind="@QuantityUnitChoice">
                            @foreach (Tuple<Guid, string> tuple in QuantityUnitChoices)
                            {
                                <option>@tuple.Item2</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>
                        <EditForm Model="conversion_">
                            <InputRadioGroup @bind-Value="conversion_.Conversion">
                                @foreach (var option in conversions)
                                {
                                    <InputRadio Value="option"/>@option<br />
                                }
                            </InputRadioGroup>
                        </EditForm>
                    </td>
                    <td>

                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="label">Input Value</span>
                    </td>
                    <td>
                        <input class="label" type="text" @bind="@dataIn" />
                        <span class="label">@unitLabelIn</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="label">Converted value</span>
                    </td>
                    <td>
                        <span class="label">@dataOut</span>
                        <span class="label">@unitLabelOut</span>
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="@(() => Convert())">Convert</button>
     </div>
}

@code {

    //http client
    private HttpClient httpClient;

    //html booleans for dynamic visualization
    private bool IsHidMainPanel = false;

    private Guid[] IDs = null;
    private List<Tuple<Guid, string>> quantityChoices_ = null;
    private List<Tuple<Guid, string>> quantityUnitChoices_ = null;
    private PhysicalQuantity quantity = null;
    private string quantityChoice = null;
    private string quantityUnitChoice = null;
    private double? dataIn = null;
    private string dataOut = null;
    private string[] conversions = new string[] { "From SI", "To SI" };
    private string unitLabelIn = null;
    private string unitLabelOut = null;

    class ConversionClass
    {
        private string conversion_ = null;
        public QuantityUnitConversion Parent { get; set; }
        public string Conversion
        {
            get
            {
                return conversion_;
            }
            set
            {
                conversion_ = value;
                if (Parent != null)
                {
                    Parent.ManageUnitChoice();
                }
            }
        }
        public ConversionClass(QuantityUnitConversion parent)
        {
            Parent = parent;
        }
    }

    private ConversionClass conversion_ = null;

    private List<Tuple<Guid, string>> QuantityChoices
    {
        get
        {
            return quantityChoices_;
        }
        set
        {
            quantityChoices_ = value;
        }
    }

    private string QuantityChoice
    {
        get { return quantityChoice; }
        set
        {
            quantityChoice = value;
            ChangeQuantityChoice();
        }
    }

    private List<Tuple<Guid, string>> QuantityUnitChoices
    {
        get
        {
            return quantityUnitChoices_;
        }
        set
        {
            quantityUnitChoices_ = value;
        }
    }

    private string QuantityUnitChoice
    {
        get { return quantityUnitChoice; }
        set
        {
            quantityUnitChoice = value;
            ChangeQuantityUnitChoice();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            conversion_ = new ConversionClass(this);
            conversion_.Conversion = conversions[0];
            QuantityChoices = new List<Tuple<Guid, string>>();
            QuantityChoices.Add(new Tuple<Guid, string>(Guid.Empty, "-------"));
            quantityUnitChoices_ = new List<Tuple<Guid, string>>() { new Tuple<Guid, string>(Guid.Empty, "-------") };
            string host = OSDC.UnitConversion.DrillingUnitConversion.WebApp.Client.Configuration.DrillingUnitConversionHostURL;
            logger.LogInformation("Trying to load QuantityDataConversions from client: " + host);
            httpClient = APIUtils.SetHttpClient(host);
            IDs = await APIUtils.LoadQuantityDataConversions(httpClient, logger);
            List<Tuple<Guid, string>> quantityChoices = await APIUtils.LoadQuantityChoices(httpClient, logger);
            foreach (Tuple<Guid, string> choice in quantityChoices)
            {
                QuantityChoices.Add(choice);
            }
        }
        catch (Exception ex)
        {
            httpClient = null;
            logger.LogError(ex, "Impossible to load QuantityDataConversions on initialization");
        }
    }
    private async Task ChangeQuantityChoice()
    {
        // find the guid of the chosen quantity
        Guid quantityID = Guid.Empty;
        foreach (Tuple<Guid, string> tuple in QuantityChoices)
        {
            if (tuple != null && tuple.Item2 != null && tuple.Item2.Equals(quantityChoice))
            {
                quantityID = tuple.Item1;
                break;
            }
        }
        quantity = await APIUtils.LoadQuantity(httpClient, logger, quantityID);
        if (quantity != null && quantity.UnitChoices != null)
        {
            List<Tuple<Guid, string>> quantityUnitChoices = new List<Tuple<Guid, string>>();
            quantityUnitChoices.Add(new Tuple<Guid, string>(Guid.Empty, "-------"));
            foreach (UnitChoice choice in quantity.UnitChoices)
            {
                if (choice != null)
                {
                    quantityUnitChoices.Add(new Tuple<Guid, string>(choice.ID, choice.UnitName));
                }
            }
            QuantityUnitChoices = quantityUnitChoices;
        }
        else
        {
            QuantityUnitChoices = new List<Tuple<Guid, string>>() { new Tuple<Guid, string>(Guid.Empty, "-------") };
        }
        QuantityUnitChoice = null;
        dataIn = null;
        dataOut = null;
        ManageUnitChoice();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void ChangeQuantityUnitChoice()
    {
        ManageUnitChoice();
    }

    private void ManageUnitChoice()
    {
        if (conversion_ != null)
        {
            if (conversion_.Conversion == conversions[0])
            {
                // from SI
                unitLabelIn = GetSIUnitLabel();
                unitLabelOut = GetUserChoiceUnitLabel();
            }
            else
            {
                // to SI
                unitLabelIn = GetUserChoiceUnitLabel();
                unitLabelOut = GetSIUnitLabel();
            }
            dataOut = null;
        }
    }

    private string GetSIUnitLabel()
    {
        string SIUnitLabel = null;
        if (quantity != null && quantity.UnitChoices != null)
        {
            foreach (UnitChoice choice in quantity.UnitChoices)
            {
                if (choice.IsSI)
                {
                    SIUnitLabel = choice.UnitLabel;
                    break;
                }
            }
        }
        return SIUnitLabel;
    }

    private string GetUserChoiceUnitLabel()
    {
        string userChoiceUnitLabel = GetSIUnitLabel();
        if (quantity != null && quantity.UnitChoices != null && !string.IsNullOrEmpty(quantityUnitChoice))
        {

            foreach (UnitChoice choice in quantity.UnitChoices)
            {
                if (quantityUnitChoice.Equals(choice.UnitName))
                {
                    userChoiceUnitLabel = choice.UnitLabel;
                    break;
                }
            }
        }
        return userChoiceUnitLabel;
    }

    private async void Convert()
    {
        dataOut = null;
        if (quantity != null && quantity.ID != Guid.Empty && quantity.UnitChoices != null && !string.IsNullOrEmpty(QuantityUnitChoice) && dataIn != null)
        {
            UnitChoice unitChoice = null;
            foreach (UnitChoice choice in quantity.UnitChoices)
            {
                if (QuantityUnitChoice.Equals(choice.UnitName))
                {
                    unitChoice = choice;
                    break;
                }
            }
            if (unitChoice != null)
            {
                bool fromSI = !string.IsNullOrEmpty(conversion_.Conversion) && conversion_.Conversion.Equals(conversions[0]);
                QuantityDataConversion request = new QuantityDataConversion();
                request.ID = Guid.NewGuid();
                request.QuantityID = quantity.ID;
                request.UnitChoiceID = unitChoice.ID;
                request.Conversion = (fromSI) ? ConversionType.FromSI : ConversionType.ToSI;
                request.DataIn = (double)dataIn;
                await APIUtils.PostQuantityChoice(httpClient, logger, request);
                request = await APIUtils.GetQuantityChoice(httpClient, logger, request.ID);
                if (request != null)
                {
                    dataOut = request.DataOutString;
                }
            }
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }
}


