@page "/UnitConversionSet"
@inject ILogger<UnitConversionSet> logger
@inject ISnackbar Snackbar

@if (unitConversionSetList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div hidden="@isHiddenMainPanel">
        <MudDataGrid T="UnitConversionSet" MultiSelection="true" Items="@unitConversionSetList" SelectedItems="@selectedUnitConversionSetHashSet" SelectedItemsChanged="@SelectedItemsChanged"
                     SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_unitConversionSetFilter"
                     Hideable="false" ReadOnly="false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual">
            <ToolBarContent>
                <MudText Typo="Typo.h6">UnitConversionSet</MudText>
                <MudButton OnClick="@AddUnitConversionSet" Color="@Color.Success" Class="add-item-btn">Add</MudButton>
                <MudButton OnClick="@DeleteSelectedUnitConversionSet" Color="@Color.Error" Class="add-item-btn">Delete</MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="UnitConversionSet" />
                <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" Filterable="true" />
                <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(() => EditUnitConversionSet(context.Item.MetaInfo.ID))" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteUnitConversionSet(context.Item.MetaInfo.ID))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="UnitConversionSet" />
            </PagerContent>
        </MudDataGrid>
    </div>
}
@if (isHiddenMainPanel && currentUnitConversionSet != null)
{
    @* <UnitConversionSetEdit CurrentUnitConversionSet="@currentUnitConversionSet" TplBaseDataList="@tplBaseDataList" OnUpdate="@ShowMainPanel" /> *@
}

@code {
    // UnitConversionSet related variables
    private List<UnitConversionSet> unitConversionSetList = new();
    private HashSet<UnitConversionSet> selectedUnitConversionSetHashSet = new();
    private UnitConversionSet? currentUnitConversionSet;

    // UI related variables
    public bool isHiddenMainPanel;
    public bool isHiddenEditPanel;
    private string? _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Show main panel
            isHiddenMainPanel = false;
            isHiddenEditPanel = true;
            currentUnitConversionSet = null;
            selectedUnitConversionSetHashSet.Clear();

            // Starting all loading tasks asynchronously
            logger.LogInformation("Trying to load list of UnitConversionSet from client: " + APIUtils.HostNameUnitConversion);
            var unitConversionSetTask = APIUtils.ClientUnitConversion.GetAllUnitConversionSetAsync();

            List<Task> loadingTaskList = new List<Task> { unitConversionSetTask };

            // Awaiting tasks and retrieve results as they become available
            while (loadingTaskList.Count > 0)
            {
                Task finishedTask = await Task.WhenAny(loadingTaskList);
                if (finishedTask == unitConversionSetTask)
                {
                    // unitConversionSetTask
                    try
                    {
                        unitConversionSetList = (List<UnitConversionSet>)await unitConversionSetTask; // awaiting the finished task allows to retrieve its result and throw exception if needed
                        if (unitConversionSetList != null)
                        {
                            unitConversionSetList.Sort((t1, t2) => t1.Name.CompareTo(t2.Name));
                        }
                        else
                        {
                            logger.LogWarning("Returned list of UnitConversionSet were null on initialization");
                            Snackbar.Add("Returned list of UnitConversionSet were null on initialization", Severity.Warning);
                        }
                    }
                    catch (ApiException ex)
                    {
                        logger.LogError(ex, "Impossible to load UnitConversionSet from client");
                    }
                }
                loadingTaskList.Remove(finishedTask);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Problem UnitConversionSet initialization");
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task AddUnitConversionSet()
    {
        try
        {
            MetaInfo metaInfo = new() { ID = Guid.NewGuid(), HttpHostName = APIUtils.HostNameUnitConversion, HttpHostBasePath = APIUtils.HostBasePathUnitConversion, HttpEndPoint = "UnitConversionSet/" };
            DateTimeOffset creationDate = DateTimeOffset.UtcNow;
            UnitConversionSet currentUnitConversionSet = new()
                {
                    MetaInfo = metaInfo,
                    Name = DataUtils.DEFAULT_NAME_UnitConversionSet,
                    Description = DataUtils.DEFAULT_DESCR_UnitConversionSet,
                    CreationDate = creationDate,
                    LastModificationDate = creationDate,
                    QuantityUnitConversionList = []
                };
            await APIUtils.ClientUnitConversion.PostUnitConversionSetAsync(currentUnitConversionSet);
            logger.LogInformation("UnitConversionSet posted successfully");
            Snackbar.Add("UnitConversionSet posted successfully", Severity.Success);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to add a new UnitConversionSet");
            Snackbar.Add("Impossible to add a new UnitConversionSet", Severity.Warning);
        }
    }

    private async Task EditUnitConversionSet(Guid id)
    {
        try
        {
            currentUnitConversionSet = await APIUtils.ClientUnitConversion.GetUnitConversionSetByIdAsync(id);
            if (currentUnitConversionSet != null)
            {
                isHiddenMainPanel = true;
                isHiddenEditPanel = false;
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to load UnitConversionSet");
                Snackbar.Add("Impossible to load UnitConversionSet", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load UnitConversionSet to be edited");
        }
    }

    private async Task DeleteUnitConversionSet(Guid id)
    {
        try
        {
            await APIUtils.ClientUnitConversion.DeleteUnitConversionSetByIdAsync(id);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to delete UnitConversionSet");
        }
    }

    private async Task DeleteSelectedUnitConversionSet()
    {
        try
        {
            foreach (UnitConversionSet unitConversionSet in selectedUnitConversionSetHashSet)
            {
                await APIUtils.ClientUnitConversion.DeleteUnitConversionSetByIdAsync(unitConversionSet.MetaInfo.ID);
            }
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to delete all UnitConversionSet");
        }

    }

    //Quick filter - filter gobally across multiple columns with the same input
    private Func<UnitConversionSet, bool>
    _unitConversionSetFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if ($"{x.Name} {x.Description}".Contains(_searchString))
            return true;

        return false;
    };

    //Events
    private void StartedEditingItem(UnitConversionSet item)
    {
        //Activating Edit event capture with parameter StartedEditingItem="@StartedEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.StartedEditingItem(...)"
    }

    private void CancelledEditingItem(UnitConversionSet item)
    {
        //Activating Cancel event capture with parameter CancelledEditingItem = "@CancelledEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CancelledEditingItem(...)"
    }

    private void CommittedItemChanges(UnitConversionSet item)
    {
        //Activating Commit event capture with parameter CommittedItemChanges = "@CommittedItemChanges" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CommittedEditingItem(...)"
    }

    private async void ShowMainPanel()
    {
        isHiddenMainPanel = false;
        isHiddenEditPanel = true;
        await OnInitializedAsync();
    }

    void SelectedItemsChanged(HashSet<UnitConversionSet> items)
    {
        foreach (var item in items)
        {
            selectedUnitConversionSetHashSet.Add(item);
        }
    }
}
