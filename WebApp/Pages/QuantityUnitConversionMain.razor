@page "/QuantityUnitConversion"
@inject ILogger<QuantityUnitConversion> logger
@inject ISnackbar Snackbar

<MudUnitAndReferenceChoiceTag HttpHost=@APIUtils.HostNameDrillingUnitConversion
                              HttpBasePath=@APIUtils.HostBasePathDrillingUnitConversion
                              HttpController="DrillingUnitChoiceSets/"
                              UnitChoiceSetName="@DataUtils.UnitAndReferenceParameters.UnitChoiceSetName"
                              UnitChoiceSetNameChanged="@DataUtils.UpdateUnitChoiceSetName">
    @if (quantityUnitConversionList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div hidden="@isHiddenMainPanel">
            <MudDataGrid T="QuantityUnitConversion" MultiSelection="true" Items="@quantityUnitConversionList" SelectedItems="@selectedQuantityUnitConversionHashSet"
                         SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quantityUnitConversionFilter"
                         Hideable="false" ReadOnly="false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">QuantityUnitConversion</MudText>
                    <MudButton OnClick="@AddQuantityUnitConversion" Color="@Color.Success" Class="add-item-btn">Add</MudButton>
                    <MudButton OnClick="@DeleteSelectedQuantityUnitConversion" Color="@Color.Error" Class="add-item-btn">Delete</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="QuantityUnitConversion" />
                    <PropertyColumn Property="x => x.MetaInfo.Name" Title="Name" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.MetaInfo.Description" Title="Description" Sortable="true" Filterable="true" />
                    <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(() => EditQuantityUnitConversion(context.Item.MetaInfo.ID))" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteQuantityUnitConversion(context.Item.MetaInfo.ID))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="QuantityUnitConversion" />
                </PagerContent>
            </MudDataGrid>
        </div>
    }
    @if (isHiddenMainPanel && currentQuantityUnitConversion != null)
    {
        <QuantityUnitConversionEdit CurrentQuantityUnitConversion="@currentQuantityUnitConversion" OnUpdate="@ShowMainPanel" />
    }
</MudUnitAndReferenceChoiceTag>

@code {
    // QuantityUnitConversion related variables
    private List<QuantityUnitConversion> quantityUnitConversionList = new();
    private HashSet<QuantityUnitConversion> selectedQuantityUnitConversionHashSet = new();
    private QuantityUnitConversion? currentQuantityUnitConversion;

    //UI related variables
    public bool isHiddenMainPanel;
    public bool isHiddenEditPanel;
    private string? _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Show main panel
            isHiddenMainPanel = false;
            isHiddenEditPanel = true;
            currentQuantityUnitConversion = null;

            // Trying to load list of QuantityUnitConversion
            logger.LogInformation("Trying to load list of QuantityUnitConversion from client: " + APIUtils.HostNameUnitConversion);
            try
            {
                quantityUnitConversionList = (List<QuantityUnitConversion>)await APIUtils.ClientUnitConversion.GetAllQuantityUnitConversionAsync();
            }
            catch (ApiException ex)
            {
                logger.LogError(ex, "Impossible to load QuantityUnitConversion from client");
            }
            if (quantityUnitConversionList != null)
            {
                quantityUnitConversionList.Sort((t1, t2) => t1.MetaInfo.Name.CompareTo(t2.MetaInfo.Name));
            }
            else
            {
                logger.LogWarning("Returned list of QuantityUnitConversion were null on initialization");
                Snackbar.Add("Returned list of QuantityUnitConversion were null on initialization", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load list of QuantityUnitConversion on initialization");
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task AddQuantityUnitConversion()
    {
        try
        {
            QuantityUnitConversion currentQuantityUnitConversion = new();
            currentQuantityUnitConversion.MetaInfo = new();
            currentQuantityUnitConversion.MetaInfo.ID = Guid.NewGuid();
            currentQuantityUnitConversion.MetaInfo.Name = DataUtils.DEFAULT_NAME_QuantityUnitConversion;
            currentQuantityUnitConversion.MetaInfo.Description = DataUtils.DEFAULT_DESCR_QuantityUnitConversion;
            currentQuantityUnitConversion.MetaInfo.CreationDate = DateTime.UtcNow;
            currentQuantityUnitConversion.MetaInfo.LastModificationDate = currentQuantityUnitConversion.MetaInfo.CreationDate;
            currentQuantityUnitConversion.MetaInfo.TypeName = typeof(QuantityUnitConversion).Name;
            currentQuantityUnitConversion.MetaInfo.HttpHostName = APIUtils.HostNameUnitConversion;
            currentQuantityUnitConversion.MetaInfo.HttpHostBasePath = APIUtils.HostBasePathUnitConversion;
            currentQuantityUnitConversion.MetaInfo.HttpEndPoint = "QuantityUnitConversion/";
            currentQuantityUnitConversion.QuantityUnitConversionParam = new ScalarDrillingProperty()
                {
                    DiracDistributionValue = new DiracDistribution()
                    {
                        Value = 1.0
                    }
                };
            await APIUtils.ClientUnitConversion.PostQuantityUnitConversionAsync(currentQuantityUnitConversion);
            logger.LogInformation("QuantityUnitConversion posted successfully");
            Snackbar.Add("QuantityUnitConversion posted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to add a new QuantityUnitConversion");
            Snackbar.Add("Impossible to add a new QuantityUnitConversion", Severity.Warning);
        }
        await OnInitializedAsync();
    }

    private async Task EditQuantityUnitConversion(Guid id)
    {
        try
        {
            currentQuantityUnitConversion = await APIUtils.ClientUnitConversion.GetQuantityUnitConversionByIdAsync(id);
            if (currentQuantityUnitConversion != null)
            {
                isHiddenMainPanel = true;
                isHiddenEditPanel = false;
            }
            else
            {
                logger.LogWarning("Impossible to load QuantityUnitConversion");
                Snackbar.Add("Impossible to load QuantityUnitConversion", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load QuantityUnitConversion to be edited");
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task DeleteQuantityUnitConversion(Guid id)
    {
        try
        {
            await APIUtils.ClientUnitConversion.DeleteQuantityUnitConversionByIdAsync(id);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to delete QuantityUnitConversion");
        }
        await OnInitializedAsync();
    }

    private async Task DeleteSelectedQuantityUnitConversion()
    {
        foreach (QuantityUnitConversion quantityUnitConversion in selectedQuantityUnitConversionHashSet)
        {
            await DeleteQuantityUnitConversion(quantityUnitConversion.MetaInfo.ID);
        }
        selectedQuantityUnitConversionHashSet.Clear();
    }

    //Quick filter - filter gobally across multiple columns with the same input
    private Func<QuantityUnitConversion, bool>
        _quantityUnitConversionFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if ($"{x.MetaInfo.Name} {x.MetaInfo.Description}".Contains(_searchString))
                return true;

            return false;
        };

    //Events
    private void StartedEditingItem(QuantityUnitConversion item)
    {
        //Activating Edit event capture with parameter StartedEditingItem="@StartedEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.StartedEditingItem(...)"
    }

    private void CancelledEditingItem(QuantityUnitConversion item)
    {
        //Activating Cancel event capture with parameter CancelledEditingItem = "@CancelledEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CancelledEditingItem(...)"
    }

    private void CommittedItemChanges(QuantityUnitConversion item)
    {
        //Activating Commit event capture with parameter CommittedItemChanges = "@CommittedItemChanges" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CommittedEditingItem(...)"
    }

    @*     public void SelectedItemsChanged(HashSet<QuantityUnitConversion> items)
    {
        selectedQuantityUnitConversionList.Clear();
        selectedQuantityUnitConversionList.InsertRange(0, items);
        items.Clear();
    } *@

    private async void ShowMainPanel()
    {
        isHiddenMainPanel = false;
        isHiddenEditPanel = true;
        await OnInitializedAsync();
    }
}
