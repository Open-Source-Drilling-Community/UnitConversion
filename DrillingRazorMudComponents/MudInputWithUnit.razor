@using System.Text.RegularExpressions
@namespace OSDC.UnitConversion.DrillingRazorMudComponents
@implements IUnitAwareComponent
@inject ILogger<MudInputWithUnit> logger

<MudTextField @bind-Value="@ValueInUserUnit" Label="@Title" Variant="@VariantType" HideSpinButtons="true" Validation="@ValidateNumber"></MudTextField>

@code {
    [CascadingParameter]
    private MudUnitAndReferenceChoiceTag? Parent { get; set; }

    [Parameter]
    public String? QuantityLabel { get; set; }

    [Parameter]
    public String? QuantityName { get; set; }

    [Parameter]
    public Variant VariantType { get; set; } = Variant.Text;

    [Parameter]
    public double SIValue
    {
        get
        {
            if (SIValue_ == null)
            {
                return double.NaN;
            }
            else
            {
                return (double)SIValue_;
            }
        }
        set
        {
            if (double.IsNaN(value))
            {
                SIValue_ = null;
            }
            else
            {
                SIValue_ = value;
            }
            ManageUnits();
        }
    }

    [Parameter]
    public double? SIValueNullable
    {
        get
        {
            return SIValue_;
        }
        set
        {
            SIValue_ = value;
            ManageUnits();
        }
    }
    private double? SIValue_;

    [Parameter]
    public EventCallback<double> SIValueChanged { get; set; }

    [Parameter]
    public EventCallback<double?> SIValueNullableChanged { get; set; }

    [Parameter]
    public DrillingSignalReferenceType DrillingSignalReference { get; set; } = DrillingSignalReferenceType.Independent;

    [Parameter]
    public PositionDirectionType PositionDirection { get; set; } = PositionDirectionType.Independent;

    [Parameter]
    public bool Hidden { get; set; }

    [Parameter]
    public int Size { get; set; }

    [Parameter]
    public double? MinValue { get; set; } = null;

    [Parameter]
    public double? MaxValue { get; set; } = null;

    private bool inhibited_ = false;

    private string Title { get; set; } = string.Empty;

    private string? ValueInUserUnit
    {
        get
        {
            return valueInUserUnit_;
        }
        set
        {
            valueInUserUnit_ = value;
            ManageChangedValue();
        }
    }

    private string? valueInUserUnit_;

    protected override void OnInitialized()
    {
        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "InputWithUnit must exist within a UnitAndReferenceChoiceTag");
        base.OnInitialized();
        Parent.Add(this);
        ManageUnits();
    }

    public async Task ManageChangedValue()
    {

        if (!inhibited_)
        {
            double? siValue = ValueInSI(valueInUserUnit_!);
            if (siValue != null)
            {
                SIValue = siValue.Value;
            }
            inhibited_ = false;
            try
            {
                await SIValueChanged.InvokeAsync(SIValue);
                await SIValueNullableChanged.InvokeAsync(SIValueNullable);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Problem while managing changed value in MudInputWithUnit razor component");
            }
            inhibited_ = false;
        }
    }

    public void ManageUnits()
    {
        if (!inhibited_)
        {
            inhibited_ = true;
            try
            {
                if (Parent != null && !string.IsNullOrEmpty(Parent.UnitSystemName))
                {
                    ValueInUserUnit = ValueFromSI(SIValueNullable);
                    string unitLabel = Parent.GetUnitLabel(QuantityName!);
                    if (!string.IsNullOrEmpty(QuantityLabel))
                    {
                        if (!string.IsNullOrEmpty(unitLabel))
                        {
                            Title = QuantityLabel + " [" + unitLabel + "]";
                        }
                        else
                        {
                            Title = QuantityLabel;
                        }
                    }
                }
                else
                {
                    ValueInUserUnit = string.Empty;
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Problem while managing units in MudInputWithUnit");
            }
            inhibited_ = false;
        }
    }
    private string? ValueFromSI(double? val)
    {
        if (Parent != null && !string.IsNullOrEmpty(Parent.UnitSystemName))
        {
            string? valueFromSI = null;
            switch (DrillingSignalReference)
            {
                case DrillingSignalReferenceType.Pressure:
                    valueFromSI = Parent.FromAbsolutePressureSI(val, QuantityName!, false);
                    break;
                case DrillingSignalReferenceType.Azimuth:
                    valueFromSI = Parent.FromTrueNorthAzimuthSI(val, QuantityName!, false);
                    break;
                case DrillingSignalReferenceType.Depth:
                    valueFromSI = Parent.FromWGS84DepthSI(val, QuantityName!, false);
                    break;
                case DrillingSignalReferenceType.Position:
                    valueFromSI = Parent.FromWGS84PositionSI(val, QuantityName!, false, PositionDirection);
                    break;
                default:
                    valueFromSI = Parent.FromSI(val, QuantityName!, false);
                    break;
            }
            return valueFromSI;
        }
        return null;
    }

    private double? ValueInSI(string input)
    {
        double valueInUserUnit;
        if (Parent != null && TryParse(input!, out valueInUserUnit))
        {
            double? siValue = null;
            switch (DrillingSignalReference)
            {
                case DrillingSignalReferenceType.Pressure:
                    siValue = Parent.ToAbsolutePressureSI(valueInUserUnit, QuantityName!);
                    break;
                case DrillingSignalReferenceType.Azimuth:
                    siValue = Parent.ToTrueNorthAzimuthSI(valueInUserUnit, QuantityName!);
                    break;
                case DrillingSignalReferenceType.Depth:
                    siValue = Parent.ToWGS84DepthSI(valueInUserUnit, QuantityName!);
                    break;
                case DrillingSignalReferenceType.Position:
                    siValue = Parent.ToWGS84PositionSI(valueInUserUnit, QuantityName!, PositionDirection);
                    break;
                default:
                    siValue = Parent.ToSI(valueInUserUnit, QuantityName!);
                    break;
            }
            return siValue;
        }
        else
        {
            return null;
        }
    }

    private string? ValidateNumber(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return null;

        var regex = new Regex(@"^[+-]?(?:\d{1,3}(?:[ ,]\d{3})*|\d+)?([.,]\d+)?$");

        if (!regex.IsMatch(input))
        {
            return "Invalid number format.";
        }
        else
        {
            if (MinValue != null || MaxValue != null)
            {
                double? inputValue = ValueInSI(input);
                if (inputValue != null)
                {
                    if (MinValue != null && inputValue < MinValue.Value)
                    {
                        string? minValueFromSI = ValueFromSI(MinValue); 
                        return "The value shall be larger than: " + minValueFromSI;
                    }
                    if (MaxValue != null && inputValue > MaxValue.Value)
                    {
                        string? maxValueFromSI = ValueFromSI(MaxValue);
                        return "The value shall be smaller than: " + maxValueFromSI;
                    }
                }
                return null;
            }
            else
            {
                return null;
            }
        }
    }

    private static bool TryParse(string value, out double result)
    {
        return double.TryParse(value, out result) ||
               double.TryParse(value, NumberStyles.Float, US_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, NO_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, FR_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, IT_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, SP_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, PT_NUMBER_FORMAT, out result) ||
               double.TryParse(value, NumberStyles.Float, UK_NUMBER_FORMAT, out result);
    }

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("en-US")
    /// </summary>
    private static CultureInfo US_CULTURE = new CultureInfo("en-US");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("nb-NO")
    /// </summary>
    private static CultureInfo NO_CULTURE = new CultureInfo("nb-NO");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("fr-FR")
    /// </summary>
    private static CultureInfo FR_CULTURE = new CultureInfo("fr-FR");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("it-IT")
    /// </summary>
    private static CultureInfo IT_CULTURE = new CultureInfo("it-IT");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("es-ES")
    /// </summary>
    private static CultureInfo SP_CULTURE = new CultureInfo("es-ES");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("en-GB")
    /// </summary>
    private static CultureInfo UK_CULTURE = new CultureInfo("en-GB");

    /// <summary>
    /// Shorthand for System.Globalization.CultureInfo("pt-PT")
    /// </summary>
    private static CultureInfo PT_CULTURE = new CultureInfo("pt-PT");

    /// <summary>
    /// Shorthand for US_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo US_NUMBER_FORMAT = US_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for NO_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo NO_NUMBER_FORMAT = NO_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for FR_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo FR_NUMBER_FORMAT = FR_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for IT_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo IT_NUMBER_FORMAT = IT_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for SP_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo SP_NUMBER_FORMAT = SP_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for UK_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo UK_NUMBER_FORMAT = UK_CULTURE.NumberFormat;

    /// <summary>
    /// Shorthand for PT_CULTURE.NumberFormat
    /// </summary>
    private static NumberFormatInfo PT_NUMBER_FORMAT = PT_CULTURE.NumberFormat;

}
